#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClientSecure.h>

ESP8266WebServer server(80);  // Create a web server on port 80

WiFiClientSecure wifiClientSecure;

const char* ssid = "Home_ext";
const char* password = "9731300951";

// FastAPI server details
const char* serverName = "https://thoroughly-correct-rooster.ngrok-free.app/endpoint";  // Replace with your FastAPI server URL
const uint8_t serverCertificate[] = {
  0x30, 0x82, 0x01, 0xA9, 0x30, 0x82, 0x01, 0x4F, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x11, 0x00, 0xE6, 0x4E, 0x67, 0xE8, 0x6A, 0xA4, 0x5C, 0x02, 0x15, 0xBB, 0x62, 0x2A, 0xEA, 0x09, 0x22, 0x57, 0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x30, 0x60, 0x31, 0x2D, 0x30, 0x2B, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x24, 0x42, 0x69, 0x74, 0x64, 0x65, 0x66, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x20, 0x50, 0x65, 0x72, 0x73, 0x6F, 0x6E, 0x61, 0x630, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x03, 0x49, 0x44, 0x53, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x0B, 0x42, 0x69, 0x74, 0x64, 0x65, 0x66, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x30, 0x1E, 0x17, 0x0D, 0x32, 0x34, 0x30, 0x38, 0x30, 0x36, 0x31, 0x37, 0x30, 0x37, 0x32, 0x31, 0x5A, 0x17, 0x0D, 0x32, 0x34, 0x31, 0x31, 0x30, 0x34, 0x31, 0x37, 0x30, 0x37, 0x32, 0x30, 0x5A, 0x30, 0x1B, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x10, 0x2A, 0x2E, 0x6E, 0x67, 0x72, 0x6F, 0x6B, 0x2D, 0x66, 0x72, 0x65, 0x65, 0x2E, 0x61, 0x70, 0x70, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0x8F, 0x0D, 0x2B, 0xEE, 0xCF, 0x07, 0xA6, 0x45, 0x9C, 0xA0, 0xFF, 0x8D, 0x83, 0xD5, 0x0E, 0xFD, 0xAB, 0x53, 0xE2, 0x7C, 0x47, 0x74, 0xC4, 0x45, 0xCF, 0xA7, 0x7A, 0x2C, 0xA9, 0x5F, 0xFA, 0x0B, 0x6F, 0x8B, 0xFF, 0x07, 0x85, 0x84, 0x48, 0x77, 0x5A, 0xEE, 0x10, 0xD3, 0x13, 0xBB, 0x51, 0x4B, 0xC5, 0x3C, 0x4F, 0x57, 0xCF, 0x4F, 0x02, 0x8A, 0x55, 0x8C, 0x10, 0x40, 0x47, 0x2B, 0xC2, 0x89, 0xA3, 0x2F, 0x30, 0x2D, 0x30, 0x2B, 0x06, 0x03, 0x55, 0x1D, 0x11, 0x04, 0x24, 0x30, 0x22, 0x82, 0x10, 0x2A, 0x2E, 0x6E, 0x67, 0x72, 0x6F, 0x6B, 0x2D, 0x66, 0x72, 0x65, 0x65, 0x2E, 0x61, 0x70, 0x70, 0x82, 0x0E, 0x6E, 0x67, 0x72, 0x6F, 0x6B, 0x2D, 0x66, 0x72, 0x65, 0x65, 0x2E, 0x61, 0x70, 0x70, 0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00, 0xD7, 0x73, 0x7F, 0x3E, 0x2A, 0x65, 0x87, 0x07, 0xCC, 0x3A, 0xEE, 0x7E, 0x2C, 0x38, 0x48, 0xD3, 0xC9, 0x34, 0x41, 0x6A, 0x5B, 0x61, 0x01, 0x57, 0xE7, 0xF2, 0xDF, 0x12, 0xB0, 0x5E, 0xB7, 0xC0, 0x02, 0x20, 0x68, 0xF6, 0x98, 0xE4, 0xFE, 0x11, 0x3C, 0x0C, 0x9E, 0x23, 0x7E, 0xDC, 0x87, 0x32, 0x57, 0xD3, 0x1F, 0xF1, 0x06, 0xCF, 0x13, 0x54, 0xF6, 0x3D, 0x78, 0x3C, 0xC4, 0x65, 0xB2, 0x45, 0x1D, 0xCA
};

#define MAX_ENTRIES 10  // Adjust this based on your memory constraints

// Structure to hold the parameters
struct Parameters {
  unsigned long timestamp;
  int memoryUsage;
  int networkTrafficVolume;
  int packetSize;
  int responseTime;
  float errorRate;
  float powerConsumption;
};

Parameters dataLog[MAX_ENTRIES];
int logIndex = 0;

unsigned long lastMillis = 0;
int requestCount = 0;
int failedRequests = 0;

// Function to collect parameters
int getMemoryUsage() {
  return ESP.getFreeHeap();
}

int getNetworkTrafficVolume() {
  return WiFi.RSSI();
}

int getPacketSize() {
  if (server.client().available()) {
    return server.client().available();
  }
  return 0;
}

int getResponseTime() {
  unsigned long startTime = millis();
  // Simulate a request to self to measure response time
  if (!server.client().connected()) {
    return -1;
  }
  unsigned long endTime = millis();
  return endTime - startTime;
}

float getErrorRate() {
  return (requestCount == 0) ? 0 : (float)failedRequests / requestCount;
}

float getPowerConsumption() {
  int adcValue = analogRead(A0);
  float voltage = adcValue * (3.3 / 1024.0);
  float current = voltage / 0.185;
  return current;
}

// Log parameters every second
void logParameters() 
{
  if (logIndex < MAX_ENTRIES) {
    dataLog[logIndex].timestamp = millis();
    dataLog[logIndex].memoryUsage = getMemoryUsage();
    dataLog[logIndex].networkTrafficVolume = getNetworkTrafficVolume();
    dataLog[logIndex].packetSize = getPacketSize();
    dataLog[logIndex].responseTime = getResponseTime();
    dataLog[logIndex].errorRate = getErrorRate();
    dataLog[logIndex].powerConsumption = getPowerConsumption();
    logIndex++;
  }

  // Check if the MAX_ENTRIES limit has been reached
  if (logIndex >= MAX_ENTRIES) {
    // Prepare the data in JSON format
    String jsonData = "[";
    for (int i = 0; i < MAX_ENTRIES; i++) {
      jsonData += "{";
      jsonData += "\"timestamp\": " + String(dataLog[i].timestamp) + ",";
      jsonData += "\"memoryUsage\": " + String(dataLog[i].memoryUsage) + ",";
      jsonData += "\"networkTrafficVolume\": " + String(dataLog[i].networkTrafficVolume) + ",";
      jsonData += "\"packetSize\": " + String(dataLog[i].packetSize) + ",";
      jsonData += "\"responseTime\": " + String(dataLog[i].responseTime) + ",";
      jsonData += "\"errorRate\": " + String(dataLog[i].errorRate) + ",";
      jsonData += "\"powerConsumption\": " + String(dataLog[i].powerConsumption);
      jsonData += "}";
      if (i < MAX_ENTRIES - 1) {
        jsonData += ",";
      }
    }
    jsonData += "]";

    // Send data to FastAPI server
    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;

      // Use wifiClientSecure for HTTPS requests
      http.begin(wifiClientSecure, serverName);  
      wifiClientSecure.setCACert(serverCertificate, sizeof(serverCertificate));  // Set the server certificate

      http.addHeader("Content-Type", "application/json");

      int httpResponseCode = http.POST(jsonData); // Send JSON data

      Serial.println(httpResponseCode);
      Serial.println("Server Name:");
      Serial.println(serverName);

      if (httpResponseCode > 0) {
        String response = http.getString();  // Get the response payload
        Serial.println(jsonData);
        Serial.println("Data sent successfully");
        Serial.println(response);
      } else {
        Serial.print("Error sending data: ");
        Serial.println(httpResponseCode);
      }

      http.end();
    } else {
      Serial.println("Error in WiFi connection");
    }

    // Reset logIndex after sending the data
    logIndex = 0;
  }
}

// Handle incoming HTTP request and respond
void handleRoot() {
  Serial.println("Received a request");
  requestCount++;
  server.send(200, "text/plain", "Hello from NodeMCU");
}

void handleNotFound() {
  server.send(404, "text/plain", "404: Not Found");
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Print the device IP address
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Define the route for the root URL
  server.on("/", handleRoot);

  // Define the response for any undefined routes
  server.onNotFound(handleNotFound);

  // Start the server
  server.begin();
  Serial.println("HTTP server started");

}

void loop() {
  server.handleClient();  // Handle incoming client requests

  // Log parameters every 1 second
  if (millis() - lastMillis >= 1000) {
    lastMillis = millis();
    logParameters();
  }
}
